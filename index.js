// Generated by CoffeeScript 1.6.3
(function() {
  var browserify, dirname, extend, fs, isBrowserify, isString, join, kew, once, relative, relativize, resolve, serve, watchify, _ref,
    __slice = [].slice;

  _ref = require('path'), dirname = _ref.dirname, join = _ref.join, resolve = _ref.resolve, relative = _ref.relative;

  fs = require('fs');

  kew = require('kew');

  browserify = require('browserify');

  watchify = require('watchify');

  extend = require('xtend');

  relativize = function(entry, requirement, extensions) {
    var expose;
    expose = relative(dirname(entry), requirement);
    expose = expose.replace(/\.[a-z_\-]+$/, '');
    return "./" + expose;
  };

  once = function(func) {
    var called;
    called = false;
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (called) {
        return;
      }
      called = true;
      return func.call.apply(func, [this].concat(__slice.call(args)));
    };
  };

  isBrowserify = function(x) {
    return x && (typeof x === 'object') && (typeof x.bundle === 'function');
  };

  isString = function(x) {
    return Object.prototype.toString.call(x) === '[object String]';
  };

  module.exports = serve = function(options, maybeOptions) {
    var b, bundle, contentType, rendered, w;
    if (maybeOptions == null) {
      maybeOptions = {};
    }
    contentType = options.contentType || 'application/javascript';
    if (isBrowserify(options)) {
      b = options;
      options = maybeOptions;
    } else if (isString(options)) {
      b = serve.bundle({
        entry: options
      });
      options = maybeOptions;
    } else {
      b = serve.bundle(options);
    }
    rendered = void 0;
    bundle = function() {
      var localRendered;
      localRendered = rendered = kew.defer();
      return b.bundle(options, once(localRendered.makeNodeResolver()));
    };
    bundle();
    if (options.watch !== false) {
      w = watchify(b);
      w.on('update', bundle);
    }
    return function(req, res, next) {
      res.setHeader('Content-type', contentType);
      return rendered.then(function(result) {
        return res.end(result);
      }).fail(next);
    };
  };

  serve.bundle = function(options) {
    var b, baseDir, bundle, expose, requirement, transform, _i, _j, _len, _len1, _ref1, _ref2;
    baseDir = dirname(resolve(options.entry));
    b = browserify({
      entries: [options.entry],
      extensions: options.extensions
    });
    b.delay = options.bundleDelay || 300;
    if (options.transforms != null) {
      _ref1 = options.transforms;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        transform = _ref1[_i];
        b.transform(transform);
      }
    }
    if (options.requirements != null) {
      _ref2 = options.requirements;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        requirement = _ref2[_j];
        expose = relativize(options.entry, requirement);
        b.require(requirement, {
          expose: expose
        });
      }
    }
    if (options.bundle != null) {
      bundle = options.bundle(bundle);
    }
    return b;
  };

  serve.serve = serve;

}).call(this);
